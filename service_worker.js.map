{"version":3,"names":[],"mappings":"","sources":["_service_worker.js"],"sourcesContent":["'use strict';\r\n// chrome://inspect/#service-workers\r\n\r\n\r\nlet version = __label__;\r\nlet addToCache = __filesAddToCache__;\r\n\r\n\r\n\r\n//───────────────────────────────────Check serviceWorker\r\nself.addEventListener('install', event => {\r\n    console.log('WORKER: install event in progress');\r\n\r\n    event.waitUntil(\r\n        caches\r\n            .open(version)\r\n            .then(cache => cache.addAll(addToCache))\r\n            .then(() => console.log('WORKER: install completed'))\r\n            .then(() => self.skipWaiting()) //\r\n            .then(() => console.log('WORKER: active')) //\r\n    );\r\n});\r\n//───────────────────────────────────Check serviceWorker\r\n\r\n\r\n\r\n//───────────────────────────────────Check serviceWorker\r\nself.addEventListener('activate', event => {\r\n    console.log('\\r\\nWORKER: activate event in progress');\r\n\r\n    event.waitUntil(\r\n        caches\r\n            .keys()\r\n            .then(keys => {\r\n                return Promise.all(\r\n                    keys\r\n                        .filter(key => !key.startsWith(version))\r\n                        .map(key => caches.delete(key))\r\n                );\r\n            })\r\n            .then(() => console.log('WORKER: activate completed'))\r\n    );\r\n});\r\n//───────────────────────────────────Check serviceWorker\r\n\r\n\r\n\r\n//───────────────────────────────────Check serviceWorker\r\nself.addEventListener('fetch', event => {\r\n    console.log('\\r\\nWORKER: fetch event in progress');\r\n\r\n    if (event.request.method !== 'GET') {\r\n        console.log(`WORKER: fetch event ignored\\r\\n  ${event.request.method}\\r\\n  ${event.request.url}`);\r\n        return;\r\n    }\r\n\r\n    event.respondWith(\r\n        caches\r\n            .match(event.request)\r\n            .then(cached => {\r\n                const fetchedFromNetwork = response => {\r\n                    let cacheCopy = response.clone();\r\n                    console.log(`WORKER: fetch response from network. ${event.request.url}`);\r\n                    caches\r\n                        .open(version)\r\n                        .then(cache => cache.put(event.request, cacheCopy))\r\n                        .then(() => console.log(`WORKER: fetch response stored in cache. ${event.request.url}`));\r\n                    return response;\r\n                }\r\n\r\n                const unableToResolve = () => {\r\n                    console.log('WORKER: fetch request failed in both cache and network');\r\n                    return new Response('<h1>Service Unavailable</h1>', {\r\n                        status: 503,\r\n                        statusText: 'Service Unavailable',\r\n                        headers: new Headers({\r\n                            'Content-Type': 'text/html'\r\n                        })\r\n                    });\r\n                }\r\n                \r\n\r\n\r\n                let networked = fetch(event.request)\r\n                    .then(fetchedFromNetwork, unableToResolve)\r\n                    .catch(unableToResolve);\r\n\r\n                console.log(`WORKER: fetch event ${cached ? '(cached)' : '(network)'}\\r\\n  ${event.request.url}`);\r\n                return cached || networked;\r\n            })\r\n    );\r\n});\r\n//───────────────────────────────────Check serviceWorker"],"file":"_service_worker.js"}